
PRAGMA foreign_keys = ON;


DROP TABLE IF EXISTS Client;
CREATE TABLE Client(
    ClientID INTEGER PRIMARY KEY,
    NIF INTEGER NOT NULL UNIQUE,
    ClientName CHAR(30) NOT NULL,
    BirthDate DATE,
    CPoints INTEGER CONSTRAINT CPointsMin CHECK(CPoints >= 0)
);

DROP TABLE IF EXISTS TicketType;
CREATE TABLE TicketType(
    TicketTypeID INTEGER PRIMARY KEY,
    TName CHAR(30) NOT NULL UNIQUE,
    TPrice REAL NOT NULL CONSTRAINT TPriceMin CHECK (TPrice >= 0.0),
    TPoints INTEGER NOT NULL CONSTRAINT TPointsMin CHECK (TPoints >= 0.0)
);

DROP TABLE IF EXISTS TicketEntry;
CREATE TABLE TicketEntry(
    TDate DATE NOT NULL,
    TEPricePaid REAL NOT NULL CONSTRAINT TEPricePaidMin CHECK (TEPricePaid >= 0.0),
    ClientID INTEGER NOT NULL REFERENCES Client(ClientID) ON DELETE CASCADE ON UPDATE RESTRICT,
    TicketTypeID INTEGER NOT NULL REFERENCES TicketType(TicketTypeID) ON DELETE RESTRICT ON UPDATE RESTRICT
    PRIMARY KEY(ClientID, TicketTypeID)
);


DROP TABLE IF EXISTS Activity;
CREATE TABLE Activity(
    ActivityID INTEGER PRIMARY KEY,
    StartTime DATETIME NOT NULL,
    EndTime DATETIME NOT NULL,
    ActivityTypeID INTEGER NOT NULL REFERENCES ActivityType(ActivityTypeID) ON DELETE RESTRICT,
    CONSTRAINT AStartBefEnd CHECK (StartTime < EndTime)
);

DROP TABLE IF EXISTS Participates;
CREATE TABLE Participates(
    AnimalID INTEGER NOT NULL REFERENCES Animal(AnimalID) ON DELETE CASCADE ON UPDATE CASCADE,
    ActivityID INTEGER NOT NULL REFERENCES Activity(ActivityID) ON DELETE CASCADE ON UPDATE CASCADE
    PRIMARY KEY(AnimalID, ActivityID)
);

DROP TABLE IF EXISTS ActivityTicket;
CREATE TABLE ActivityTicket(
    ActivityID INTEGER NOT NULL REFERENCES Activity(ActivityID) ON DELETE CASCADE ON UPDATE RESTRICT,
    ClientID INTEGER NOT NULL REFERENCES Client(ClientID) ON DELETE CASCADE ON UPDATE RESTRICT
    PRIMARY KEY(ActivityID, ClientID)
);

DROP TABLE IF EXISTS ActivityType;
CREATE TABLE ActivityType(
    ActivityTypeID INTEGER PRIMARY KEY,
    AtName CHAR(30) NOT NULL UNIQUE,
    AtPrice REAL NOT NULL CONSTRAINT AtPriceMin CHECK(AtPrice >= 0),
    Duration INTEGER NOT NULL CONSTRAINT DurationMin CHECK(Duration >= 0)
);

DROP TABLE IF EXISTS ActivityZone;
CREATE TABLE ActivityZone(
    ActivityZoneID INTEGER PRIMARY KEY,
    AtZName TEXT NOT NULL UNIQUE,
    ZoneID INTEGER REFERENCES Zone(ZoneID) ON DELETE SET NULL ON UPDATE CASCADE
);

DROP TABLE IF EXISTS Located;
CREATE TABLE Located(
    ActivityTypeID  INTEGER NOT NULL REFERENCES ActivityType(ActivityTypeID) ON DELETE CASCADE ON UPDATE CASCADE,
    ActivityZoneID INTEGER REFERENCES ActivityZone(ActivityZoneID) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY(ActivityTypeID,ActivityZoneID)
);

DROP TABLE IF EXISTS Habitat;
CREATE TABLE Habitat(
    HabitatID INTEGER PRIMARY KEY,
    HName TEXT NOT NULL UNIQUE,
    HOpeningTime TIME,
    HClosingTime TIME,
    ZoneID INTEGER REFERENCES Zone(ZoneID) ON DELETE SET NULL ON UPDATE CASCADE,
    CONSTRAINT HOpenBefClose CHECK (HOpeningTime < HClosingTime)
);

DROP TABLE IF EXISTS Zone;
CREATE TABLE Zone(
    ZoneID INTEGER PRIMARY KEY,
    ZName CHAR(30) NOT NULL UNIQUE,
    ZOpeningTime TIME,
    ZClosingTime TIME,
    CONSTRAINT ZOpenBefClose CHECK (ZOpeningTime < ZClosingTime)
);


DROP TABLE IF EXISTS Animal;
CREATE TABLE Animal(
    AnimalID INTEGER PRIMARY KEY,
    AnimalName CHAR(30),
    BirthDate DATE,
    AWeight REAL CONSTRAINT AWeightMin CHECK (AWeight >= 0.0),
    AHeight REAL CONSTRAINT AHeightMin CHECK (AHeight >= 0.0),
    ALength REAL CONSTRAINT ALengthMin CHECK (ALength >= 0.0),
    SpeciesID INTEGER NOT NULL REFERENCES Species(SpeciesID) ON DELETE RESTRICT ON UPDATE RESTRICT
);

DROP TABLE IF EXISTS Species;
CREATE TABLE Species(
    SpeciesID INTEGER PRIMARY KEY,
    CommonName CHAR(30) NOT NULL,
    ScientificName  CHAR(30) NOT NULL UNIQUE,
    AverageWeight REAL CONSTRAINT SAvWeightMin CHECK (AverageWeight >= 0.0),
    AverageHeight REAL CONSTRAINT SAvHeightMin CHECK (AverageHeight >= 0.0),
    AverageLength REAL CONSTRAINT SAvLengthMin CHECK (AverageLength >= 0.0),
    NumberCubs TEXT,
    Gestation TEXT,
    SexualMaturity TEXT,
    HabitatID INTEGER REFERENCES Habitat(HabitatID) ON DELETE SET NULL ON UPDATE CASCADE,
    SocialLifeID INTEGER NOT NULL REFERENCES SocialLife(SocialLifeID) ON DELETE RESTRICT ON UPDATE RESTRICT,
    DietID INTEGER NOT NULL REFERENCES Diet(DietID) ON DELETE RESTRICT ON UPDATE RESTRICT,
    ActivenessID INTEGER REFERENCES Activeness(ActivenessID) ON DELETE RESTRICT ON UPDATE RESTRICT,
    ReproductionID INTEGER REFERENCES Reproduction(ReproductionID) ON DELETE RESTRICT ON UPDATE RESTRICT,
    AnimalGroupID INTEGER NOT NULL REFERENCES AnimalGroup(AnimalGroupID) ON DELETE RESTRICT ON UPDATE CASCADE
);

DROP TABLE IF EXISTS AnimalGroup;
CREATE TABLE AnimalGroup(
    AnimalGroupID INTEGER PRIMARY KEY,
    AGroupName CHAR(30) NOT NULL UNIQUE
);

DROP TABLE IF EXISTS SocialLife;
CREATE TABLE SocialLife(
    SocialLifeID INTEGER PRIMARY KEY,
    SLifeName CHAR(30) NOT NULL UNIQUE
);


DROP TABLE IF EXISTS Diet;
CREATE TABLE Diet(
    DietID INTEGER PRIMARY KEY,
    DietName CHAR(30) NOT NULL UNIQUE
);

DROP TABLE IF EXISTS Reproduction;
CREATE TABLE Reproduction(
    ReproductionID INTEGER PRIMARY KEY,
    RepName CHAR(30) NOT NULL UNIQUE
);

DROP TABLE IF EXISTS Activeness;
CREATE TABLE Activeness (
    ActivenessID INTEGER PRIMARY KEY,
    ActivenessName CHAR(30) NOT NULL UNIQUE
);