
PRAGMA foreign_keys = ON;


DROP TABLE IF EXISTS Client;
CREATE TABLE Client(
    ClientID INTEGER PRIMARY KEY AUTOINCREMENT,
    NIF INTEGER NOT NULL UNIQUE,
    ClientName CHAR(30) NOT NULL,
    BirthDate DATE,
    CPoints INTEGER CONSTRAINT CPointsMin CHECK(CPoints >= 0)
);

DROP TABLE IF EXISTS TicketType;
CREATE TABLE TicketType(
    TicketTypeID INTEGER PRIMARY KEY AUTOINCREMENT,
    TName CHAR(30) NOT NULL UNIQUE,
    TPrice REAL NOT NULL CONSTRAINT TPriceMin CHECK (TPrice >= 0.0),
    TPoints INTEGER NOT NULL CONSTRAINT TPointsMin CHECK (TPoints >= 0.0)
);

DROP TABLE IF EXISTS TicketEntry;
CREATE TABLE TicketEntry(
    TDate DATE NOT NULL,
    TEPricePaid REAL NOT NULL CONSTRAINT TEPricePaidMin CHECK (TEPricePaid >= 0.0),
    ClientID INTEGER REFERENCES Client(ClientID) ON DELETE SET NULL,
    TicketTypeID INTEGER REFERENCES TicketType(TicketTypeID) ON DELETE SET NULL
);


DROP TABLE IF EXISTS Activity;
CREATE TABLE Activity(
    ActivityID INTEGER PRIMARY KEY AUTOINCREMENT,
    StartTime DATETIME NOT NULL,
    EndTime DATETIME NOT NULL,
    ActivityTypeID INTEGER REFERENCES ActivityType(ActivityTypeID) ON DELETE SET NULL,
    CONSTRAINT AStartBefEnd CHECK (StartTime < EndTime)
);

DROP TABLE IF EXISTS Participates;
CREATE TABLE Participates(
    AnimalID INTEGER REFERENCES Animal(AnimalID) ON DELETE SET NULL,
    ActivityID INTEGER REFERENCES Activity(ActivityID) ON DELETE SET NULL
);

DROP TABLE IF EXISTS ActivityTicket;
CREATE TABLE ActivityTicket(
    ActivityID INTEGER REFERENCES Activity(ActivityID) ON DELETE SET NULL,
    ClientID INTEGER REFERENCES Client(ClientID) ON DELETE SET NULL  
);

DROP TABLE IF EXISTS ActivityType;
CREATE TABLE ActivityType(
    ActivityTypeID INTEGER PRIMARY KEY AUTOINCREMENT,
    AtName CHAR(30) UNIQUE,
    AtPrice REAL NOT NULL CONSTRAINT AtPriceMin CHECK(AtPrice >= 0),
    Duration INTEGER NOT NULL CONSTRAINT DurationMin CHECK(Duration >= 0)
);

DROP TABLE IF EXISTS ActivityZone;
CREATE TABLE ActivityZone(
    ActivityZoneID INTEGER PRIMARY KEY AUTOINCREMENT,
    AtZName TEXT UNIQUE
);

DROP TABLE IF EXISTS Located;
CREATE TABLE Located(
    ActivityTypeID  INTEGER REFERENCES ActivityType(ActivityTypeID) ON DELETE SET NULL,
    ActivityZoneID INTEGER REFERENCES ActivityZone(ActivityZoneID) ON DELETE SET NULL,
    PRIMARY KEY(ActivityTypeID,ActivityZoneID)
);

DROP TABLE IF EXISTS Habitat;
CREATE TABLE Habitat(
    HabitatID INTEGER PRIMARY KEY AUTOINCREMENT,
    HName TEXT,
    HOpeningTime TIME,
    HClosingTime TIME,
    ZoneID INTEGER REFERENCES Zone(ZoneID),
    CONSTRAINT HOpenBefClose CHECK (HOpeningTime < HClosingTime)
);

DROP TABLE IF EXISTS Zone;
CREATE TABLE Zone(
    ZoneID INTEGER PRIMARY KEY AUTOINCREMENT,
    ZName CHAR(30) UNIQUE,
    ZOpeningTime TIME,
    ZClosingTime TIME,
    CONSTRAINT ZOpenBefClose CHECK (ZOpeningTime < ZClosingTime)
);


DROP TABLE IF EXISTS Animal;
CREATE TABLE Animal(
    AnimalID INTEGER PRIMARY KEY AUTOINCREMENT,
    AnimalName CHAR(30),
    BirthDate DATE,
    AWeight REAL CONSTRAINT AWeightMin CHECK (AWeight >= 0.0),
    AHeight REAL CONSTRAINT AHeightMin CHECK (AHeight >= 0.0),
    ALength REAL CONSTRAINT ALengthMin CHECK (ALength >= 0.0),
    SpeciesID INTEGER REFERENCES Species(SpeciesID) ON DELETE SET NULL
);

DROP TABLE IF EXISTS Species;
CREATE TABLE Species(
    SpeciesID INTEGER PRIMARY KEY AUTOINCREMENT,
    CommonName CHAR(30) NOT NULL,
    ScientificName  CHAR(30) NOT NULL UNIQUE,
    AverageWeight REAL CONSTRAINT SAvWeightMin CHECK (AverageWeight >= 0.0),
    AverageHeight REAL CONSTRAINT SAvHeightMin CHECK (AverageHeight >= 0.0),
    AverageLength REAL CONSTRAINT SAvLengthMin CHECK (AverageLength >= 0.0),
    NumberCubs TEXT,
    Gestation TEXT,
    SexualMaturity TEXT,
    HabitatID INTEGER REFERENCES Habitat(HabitatID) ON DELETE CASCADE,
    SocialLifeID INTEGER REFERENCES SocialLife(SocialLifeID) ON DELETE SET NULL,
    DietID INTEGER REFERENCES Diet(DietID) ON DELETE SET NULL,
    ActivenessID INTEGER REFERENCES Activeness(ActivenessID) ON DELETE SET NULL,
    ReproductionID INTEGER REFERENCES Reproduction(ReproductionID) ON DELETE SET NULL,
    AnimalGroupID INTEGER REFERENCES AnimalGroup(AnimalGroupID) ON DELETE SET NULL
);

DROP TABLE IF EXISTS AnimalGroup;
CREATE TABLE AnimalGroup(
    AnimalGroupID INTEGER PRIMARY KEY AUTOINCREMENT,
    AGroupName CHAR(30) NOT NULL
);

DROP TABLE IF EXISTS SocialLife;
CREATE TABLE SocialLife(
    SocialLifeID INTEGER PRIMARY KEY AUTOINCREMENT,
    SLifeName CHAR(30) NOT NULL
);


DROP TABLE IF EXISTS Diet;
CREATE TABLE Diet(
    DietID INTEGER PRIMARY KEY AUTOINCREMENT,
    DietName CHAR(30) NOT NULL
);

DROP TABLE IF EXISTS Reproduction;
CREATE TABLE Reproduction(
    ReproductionID INTEGER PRIMARY KEY AUTOINCREMENT,
    RepName CHAR(30) NOT NULL
);

DROP TABLE IF EXISTS Activeness;
CREATE TABLE Activeness (
    ActivenessID INTEGER PRIMARY KEY AUTOINCREMENT,
    ActivenessName CHAR(30) NOT NULL
);